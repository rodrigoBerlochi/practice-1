git clone https://github.com/rodrigoBerlochi/practice-1.git

wip					add .		commit		push
Working Directory	Index		HEAD		remote

git add .
git commit -m "..."
git push
git push --set-upstream origin featureName
git log

git checkout -b featureN 
OR
git branch second
git checkout second

git pull
git merge branchN

git diff sourceB targetB

git log --pretty=oneline
	--author=nn
	--graph

git tag 1.0.0 10firstnumberscommitid

gitk ---- ui 
git config color.ui true

delete:
git checkout master (change first)
git branch -d secondBranch

mixing work from different branches: 
1- merge
2- cherry pick

Tags useful to mark releases
Points to create future branches and fix bugs
git tag
git tag nameN
git checkout -b branchName tagName -> creates a branch at the point of tagName

remote / local
git branch (local)
git branch -r (remotes)
# origin/master  origin/branchName

git fetch origin all
git whatchanged (simil git log + file names that changed)

# never checkout directly remote branch unless you want troubles
# git fetch update remote tracking branches, not local working branches

# advice to avoid pull if we are not completely sure
git pull = git fetch + git merge

# remote branches
# right process is
git branch myLocalB origin/b
git checkout myLocalB

# work on it and then
git merge origin/b 

# explicit pushes:
git push origin mybranch:remoteBranchTarget 
# use : to separate from and to names

#push Tags
git push --tags origin
#notice tags are not part of a branch, but of the repo!
#pushing to the repo! but using naming it can hold
#a reference to a branch: git tag branchN/v2.3

#deleting branches
empty branch push 
git push origin :targetTODelete

# clean remote from stale branches
git remote prune

# regular work cycle
git checkout -b B  //create own branch local to work

// work and every now and then, check what's new in remote
git fetch origin 
// now we have read the remote changes, but those are not merged
// visualize new stuff
gitk origin master
// you like? now get new code!
git pull origin master
// now changes are in our local 
we can:
git commit -m "some"
git push

That help to keep in sync with remote. 
fast-forwarding merges are automatically. If conflict, is not fast-forwarding
and should be resolved manually

Examine
git log
git whatchanged
git diff (working vs index)
git diff branch1 branch2

reset a file:
git checkout HEAD~7 ffobar.c (0 is current latest, 1 the previous state)

blaming:
git blame file
git gui blame file

config
git config --global user.name "Ro"
git config --global user.email "a@gmail.com"
git config --global merge.tool namehere


specify a revision:
-branch
-tag
-commit id sha1 hash (6-8-10 first digits)
-HEAD tag ~N 

git checkout bed45t69
git diff HEAD~4..HEAD~2








